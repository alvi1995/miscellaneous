 1	 -1		2	  0		0	  0		0	  0
-2	  2		1     1	    0	  0	    0     0
 0	  3	   -1	 -2	   -1	  0		0	  0
 0	  0		1	  3		2    -2	    0	  0
 0	  0	    0	 -1	   -2	  1	    3	  0
 0	  0		0	  0	    2	 -1		2	  1
 0	  0		0	  0		0	  1		1	  3
 0	  0     0     0     0     0    -3     2


const double TINY=1.0e-40;
int i,j,k,l,mm;
double dum;
mm = m1+m2+1 = 4; 	


l = m1 = 1

for (i=0;i<m1;i++) {
	for (j=m1-i;j<mm;j++) au[i][j-l]=au[i][j];
	l--;
	for (j=mm-l-1;j<mm;j++) au[i][j]=0.0;
}

i = 0; i < 1
	j = m1 - 0 = 1; j < mm=4
		au[i][j-l] = au[0][1-1] = au[0][0] = au[0][1] = -1
	j = 2; j < mm=4
		au[i][j-l] = au[0][2-1] = au[0][1] = au[0][2] = 2
	j = 3; j < mm=4
		au[i][j-l] = au[0][3-1] = au[0][3] = 0

	l = 0
	j = 4-0-1 = 3; j < 4 false
		au[i][j] = au[0][3] = 0


i = 1; i < 1 false

d = 1
l = 1

-1	  2		0	  0		0	  0		0	  0
-2	  2		1     1	    0	  0	    0     0
 0	  3	   -1	 -2	   -1	  0		0	  0
 0	  0		1	  3		2    -2	    0	  0
 0	  0	    0	 -1	   -2	  1	    3	  0
 0	  0		0	  0	    2	 -1		2	  1
 0	  0		0	  0		0	  1		1	  3
 0	  0     0     0     0     0    -3     2

for (k=0;k<n;k++) {
	dum=au[k][0];
	i=k;
	if (l<n) l++;
	for (j=k+1;j<l;j++) {
		if (abs(au[j][0]) > abs(dum)) {
			dum=au[j][0];
			i=j;
		}
	}
	indx[k]=i+1;
	if (dum == 0.0) au[k][0]=TINY;
	if (i != k) {
		d = -d;
		for (j=0;j<mm;j++) SWAP(au[k][j],au[i][j]);
	}
	for (i=k+1;i<l;i++) {
		dum=au[i][0]/au[k][0];
		al[k][i-k-1]=dum;
		for (j=1;j<mm;j++) au[i][j-1]=au[i][j]-dum*au[k][j];
		au[i][mm-1]=0.0;
	}
}			

k = 0; k < 8
	dum=au[k][0];
	i=k;
	if (l<n) l++;
	for (j=k+1;j<l;j++) {
		if (abs(au[j][0]) > abs(dum)) {
			dum=au[j][0];
			i=j;
		}
	}

k = 0; k < 8
	dum = au[0][0] = -1
	i = k = 0
	l < n => 1 < 8
		l = 2
	j = k+1 = 1; j < 2 
		abs(au[j][0] = au[1][0] = -2) > abs(dum=-1) true
			dum = au[j][0] = au[1][0] = -2
			i = 1


	indx[k]=i+1;
	if (dum == 0.0) au[k][0]=TINY;
	if (i != k) {
		d = -d;
		for (j=0;j<mm;j++) SWAP(au[k][j],au[i][j]);
	}


	indx[k=0] = i+1 = 2
	dum = -2 == 0 false
	i = 1 != k = 0 true
		d = -d
		j = 0; j < 4
			swap(au[0][0],au[1][0])
			au[0][0] = -2
			au[1][0] = -1
		j = 1; j < 4
			swap(au[0][1],au[1][1])
			au[0][1] = 2
			au[1][1] = 2

		j = 2; j < 4
			swap(au[0][2],au[1][2])
			au[0][2] = 1
			au[1][2] = 0
		
		j = 3; j < 4
			swap(au[0][3],au[1][3])
			au[0][1] = 1
			au[1][1] = 0

   -2	  2		1	  1		0	  0		0	  0
   -1	  2		0     0	    0	  0	    0     0
	0	  3	   -1	 -2	   -1	  0		0	  0
	0	  0		1	  3		2    -2	    0	  0
	0	  0	    0	 -1	   -2	  1	    3	  0
 	0	  0		0	  0	    2	 -1		2	  1
 	0	  0		0	  0		0	  1		1	  3
	0	  0     0     0     0     0    -3     2

	for (i=k+1;i<l;i++) {
		dum=au[i][0]/au[k][0];
		al[k][i-k-1]=dum;
		for (j=1;j<mm;j++) au[i][j-1]=au[i][j]-dum*au[k][j];
		au[i][mm-1]=0.0;
	}

	i = k + 1 = 1; i < 2
		dum = au[i][0]/au[k][0] = au[1][0]/au[0][0] = -1/-2 = 0.5
		al[k][i-k-1] = al[0][1-0-1] = al[0][0] = 0.5
		
		j = 1; j < 4
			au[i][j-1] = au[1][1-1] = au[1][0] = au[i][j] - dum*au[k][j]
											   = au[1][1] - 0.5*au[0][1]
											   = 2 - 0.5*2 = 1
		
		j = 2; j < 4
			au[i][j-1] = au[1][2-1] = au[1][1] = au[i][j] - dum*au[k][j]
											   = au[1][2] - 0.5*au[0][2]
											   = 0 - 0.5*1 = -0.5
		
		j = 3; j < 4
			au[i][j-1] = au[1][3-1] = au[1][2] = au[i][j] - dum*au[k][j]
											   = au[1][3] - 0.5*au[0][3]
											   = 0 - 0.5*1 = -0.5

   -2	  2		1	  1		0	  0		0	  0
    1	 -0.5  -0.5   0	    0	  0	    0     0
	0	  3	   -1	 -2	   -1	  0		0	  0
	0	  0		1	  3		2    -2	    0	  0
	0	  0	    0	 -1	   -2	  1	    3	  0
 	0	  0		0	  0	    2	 -1		2	  1
 	0	  0		0	  0		0	  1		1	  3
	0	  0     0     0     0     0    -3     2

		au[1][3] = 0

k = 1; k < 8
	dum=au[k][0];
	i=k;
	if (l<n) l++;
	for (j=k+1;j<l;j++) {
		if (abs(au[j][0]) > abs(dum)) {
			dum=au[j][0];
			i=j;
		}
	}	
		

k = 1; k < 8
	dum = au[k][0] = au[1][0] = 1
	i = 1
	if(l=2 < n=8) l = 3
	j = 2; j < 3 true
		abs(au[2][0] > abs(1) 0 > 1) false

indx[k=1] = indx[1] = i+1 = 2
dum = 1 == 0 false

i = 1 != k=1	false

i = 2; i < 3
	dum = au[2][0]/au[1][0] = 0
	al[k][i-k-1] = al[1][2-1-1] = al[1][0] = dum = 0
	j = 1; j < 4
		au[2][0] = au[2][1] = 3
	j = 2; j < 4
		au[2][1] = au[2][2] = -1
	j = 3; j < 4
		au[2][2] = au[2][3] = -2

	au[2][3] = 0 

   -2	  2		1	  1		0	  0		0	  0
    1	 -0.5  -0.5   0	    0	  0	    0     0
	3	 -1	   -2	  0	   -1	  0		0	  0
	0	  0		1	  3		2    -2	    0	  0
	0	  0	    0	 -1	   -2	  1	    3	  0
 	0	  0		0	  0	    2	 -1		2	  1
 	0	  0		0	  0		0	  1		1	  3
	0	  0     0     0     0     0    -3     2


k = 2; k < 8
	dum = au[k][0] = au[2][0] = 3
	i = k = 2
	l=3 < n=8 l = 4
	j = 3; j < 4 true
		abs(au[j][0] = au[3][0]=0 > abs(3)) false

	indx[k] = indx[2] = i+1 = 3
	dum=3 == 0 false
	2 != 2 false

	i = 3; i < 4
		dum = au[i][0]/au[k][0] = au[3][0]/au[2][0] = 0
		al[k][i-k-1] = al[2][0] = 0
		j = 1; j < 4
			au[i][j-1] = au[3][0] = au[3][1] - 0
								  = 0
		j = 2
			au[i][j-1] = au[3][1] = au[3][2]
								  = 1
		j = 3
			au[i][j-1] = au[3][2] = au[3][3] = 3

		au[3][3] = 0

	
-2	  2		1	  1		0	  0		0	  0
 1	 -0.5  -0.5   0	    0	  0	    0     0
 3	 -1	   -2	  0	   -1	  0		0	  0
 0	  1		3	  0		2    -2	    0	  0
 0	  0	    0	 -1	   -2	  1	    3	  0
 0	  0		0	  0	    2	 -1		2	  1
 0	  0		0	  0		0	  1		1	  3
 0	  0     0     0     0     0    -3     2

	
